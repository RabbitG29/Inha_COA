`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2018/12/01 14:47:10
// Design Name: 
// Module Name: INSTRCACHE
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module INSTRCACHE(PC, INSTRUCTION);
    input wire [31:0] PC;
    output reg [31:0] INSTRUCTION;
    reg [31:0]MEM[150:0];
    
    always @(*) begin
    INSTRUCTION <= 32'b00000000000000000000000000000000;
         MEM[0] <= 32'b00000000010101010101010101010100; // MLD D1 ADDR
         MEM[1] <= 32'b00000001010101010101010101010100; // MLD D2 ADDR 
         MEM[2] <= 32'b00000010010101010101010101010100; // MLD D3 ADDR
         //
         MEM[3] <= 32'b00000101010101010101010101010000; // MSTR ADDR D1
         MEM[4] <= 32'b00000101010101010101010101010100; // MSTR ADDR D2
         MEM[5] <= 32'b00000101010101010101010101011000; // MSTR ADDR D3
         //
         MEM[6] <= 32'b00010000010101010101010101010100; // ILD D1 ADDR
         MEM[7] <= 32'b00010001010101010101010101010100; // ILD D2 ADDR
         MEM[8] <= 32'b00010010010101010101010101010100; // ILD D3 ADDR 
         //
         MEM[9] <= 32'b00010100000101010101010101010101; // ILDI D1 POS1 IMMVAL
         MEM[10] <= 32'b00010100010101010101010101010101; // ILDI D1 POS2 IMMVAL
         MEM[11] <= 32'b00010100100101010101010101010101; // ILDI D1 POS3 IMMVAL
         MEM[12] <= 32'b00010100110101010101010101010101; // ILDI D1 POS4 IMMVAL
         //
         MEM[13] <= 32'b00010101000101010101010101010101; // ILDI D2 POS1 IMMVAL
         MEM[14] <= 32'b00010101010101010101010101010101; // ILDI D2 POS2 IMMVAL
         MEM[15] <= 32'b00010101100101010101010101010101; // ILDI D2 POS3 IMMVAL
         MEM[16] <= 32'b00010101110101010101010101010101; // ILDI D2 POS4 IMMVAL
         //
         MEM[17] <= 32'b00010110000101010101010101010101; // ILDI D3 POS1 IMMVAL
         MEM[18] <= 32'b00010110010101010101010101010101; // ILDI D3 POS2 IMMVAL
         MEM[19] <= 32'b00010110100101010101010101010101; // ILDI D3 POS3 IMMVAL
         MEM[20] <= 32'b00010110110101010101010101010101; // ILDI D3 POS4 IMMVAL
         //
         MEM[21] <= 32'b00011001010101010101010101010000; // ISTR ADDR D1
         MEM[22] <= 32'b00011001010101010101010101010100; // ISTR ADDR D2
         MEM[23] <= 32'b00011001010101010101010101011000; // ISTR ADDR D3
         //
         MEM[24] <= 32'b00100000010000000000000000000000; // MADD D1 D2
         MEM[25] <= 32'b00100000100000000000000000000000; // MADD D1 D3
         MEM[26] <= 32'b00100001000000000000000000000000; // MADD D2 D1
         MEM[27] <= 32'b00100001100000000000000000000000; // MADD D2 D3
         MEM[28] <= 32'b00100010000000000000000000000000; // MADD D3 D1
         MEM[29] <= 32'b00100010010000000000000000000000; // MADD D3 D2
         //
         MEM[30] <= 32'b00100100010000000000000000000000; // MSUB D1 D2
         MEM[31] <= 32'b00100100100000000000000000000000; // MSUB D1 D3
         MEM[32] <= 32'b00100101000000000000000000000000; // MSUB D2 D1
         MEM[33] <= 32'b00100101100000000000000000000000; // MSUB D2 D3
         MEM[34] <= 32'b00100110000000000000000000000000; // MSUB D3 D1
         MEM[35] <= 32'b00100110010000000000000000000000; // MSUB D3 D2
         //
         MEM[36] <= 32'b00101000010000000000000000000000; // MMUL D1 D2
         MEM[37] <= 32'b00101000100000000000000000000000; // MMUL D1 D3
         MEM[38] <= 32'b00101001000000000000000000000000; // MMUL D2 D1
         MEM[39] <= 32'b00101001100000000000000000000000; // MMUL D2 D3
         MEM[40] <= 32'b00101010000000000000000000000000; // MMUL D3 D1
         MEM[41] <= 32'b00101010010000000000000000000000; // MMUL D3 D2
         //
         MEM[42] <= 32'b00110100010000000000000000000000; // SMUL D1 D2
         MEM[43] <= 32'b00110100100000000000000000000000; // SMUL D1 D3
         MEM[44] <= 32'b00110101000000000000000000000000; // SMUL D2 D1
         MEM[45] <= 32'b00110101100000000000000000000000; // SMUL D2 D3
         MEM[46] <= 32'b00110110000000000000000000000000; // SMUL D3 D1
         MEM[47] <= 32'b00110110010000000000000000000000; // SMUL D3 D2
         // NPOS1 MPOS1 
         MEM[48] <= 32'b01000000000100100000000000000000; // IADD D1 NPOS1 D2 MPOS1 D3 KPOS1
         MEM[49] <= 32'b01000000000100100100000000000000; // IADD D1 NPOS1 D2 MPOS1 D3 KPOS2
         MEM[50] <= 32'b01000000000100101000000000000000; // IADD D1 NPOS1 D2 MPOS1 D3 KPOS3
         MEM[51] <= 32'b01000000000100101100000000000000; // IADD D1 NPOS1 D2 MPOS1 D3 KPOS4 
         // NPOS1 KPOS1
         MEM[52] <= 32'b01000000000101100000000000000000; // IADD D1 NPOS1 D2 MPOS2 D3 KPOS1
         MEM[53] <= 32'b01000000000110100000000000000000; // IADD D1 NPOS1 D2 MPOS3 D3 KPOS1
         MEM[54] <= 32'b01000000000111100000000000000000; // IADD D1 NPOS1 D2 MPOS4 D3 KPOS1
         // MPOS1 KPOS1 
         MEM[55] <= 32'b01000000010100100000000000000000; // IADD D1 NPOS2 D2 MPOS1 D3 KPOS1
         MEM[56] <= 32'b01000000100100100000000000000000; // IADD D1 NPOS3 D2 MPOS1 D3 KPOS1
         MEM[57] <= 32'b01000000110100100000000000000000; // IADD D1 NPOS4 D2 MPOS1 D3 KPOS1
         // KPOS1
         MEM[58] <= 32'b01000000010101100000000000000000; // IADD D1 NPOS2 D2 MPOS2 D3 KPOS1
         MEM[59] <= 32'b01000000010110100000000000000000; // IADD D1 NPOS2 D2 MPOS3 D3 KPOS1
         MEM[60] <= 32'b01000000010111100000000000000000; // IADD D1 NPOS2 D2 MPOS4 D3 KPOS1
         MEM[61] <= 32'b01000000100101100000000000000000; // IADD D1 NPOS3 D2 MPOS2 D3 KPOS1
         MEM[62] <= 32'b01000000100110100000000000000000; // IADD D1 NPOS3 D2 MPOS3 D3 KPOS1
         MEM[63] <= 32'b01000000100111100000000000000000; // IADD D1 NPOS3 D2 MPOS4 D3 KPOS1
         MEM[64] <= 32'b01000000110101100000000000000000; // IADD D1 NPOS4 D2 MPOS2 D3 KPOS1
         MEM[65] <= 32'b01000000110110100000000000000000; // IADD D1 NPOS4 D2 MPOS3 D3 KPOS1
         MEM[66] <= 32'b01000000110111100000000000000000; // IADD D1 NPOS4 D2 MPOS4 D3 KPOS1
         // MPOS1
         MEM[67] <= 32'b01000000010100100100000000000000; // IADD D1 NPOS2 D2 MPOS1 D3 KPOS2
         MEM[68] <= 32'b01000000010100101000000000000000; // IADD D1 NPOS2 D2 MPOS1 D3 KPOS3
         MEM[69] <= 32'b01000000010100101100000000000000; // IADD D1 NPOS2 D2 MPOS1 D3 KPOS4
         MEM[70] <= 32'b01000000100100100100000000000000; // IADD D1 NPOS3 D2 MPOS1 D3 KPOS2
         MEM[71] <= 32'b01000000100100101000000000000000; // IADD D1 NPOS3 D2 MPOS1 D3 KPOS3
         MEM[72] <= 32'b01000000100100101100000000000000; // IADD D1 NPOS3 D2 MPOS1 D3 KPOS4
         MEM[73] <= 32'b01000000110100100100000000000000; // IADD D1 NPOS4 D2 MPOS1 D3 KPOS2
         MEM[74] <= 32'b01000000110100101000000000000000; // IADD D1 NPOS4 D2 MPOS1 D3 KPOS3
         MEM[75] <= 32'b01000000110100101100000000000000; // IADD D1 NPOS4 D2 MPOS1 D3 KPOS4
         // NPOS1
         MEM[76] <= 32'b01000000000101100100000000000000; // IADD D1 NPOS1 D2 MPOS2 D3 KPOS2
         MEM[77] <= 32'b01000000000101101000000000000000; // IADD D1 NPOS1 D2 MPOS2 D3 KPOS3
         MEM[78] <= 32'b01000000000101101100000000000000; // IADD D1 NPOS1 D2 MPOS2 D3 KPOS4
         MEM[79] <= 32'b01000000000110100100000000000000; // IADD D1 NPOS1 D2 MPOS3 D3 KPOS2
         MEM[80] <= 32'b01000000000110101000000000000000; // IADD D1 NPOS1 D2 MPOS3 D3 KPOS3
         MEM[81] <= 32'b01000000000110101100000000000000; // IADD D1 NPOS1 D2 MPOS3 D3 KPOS4
         MEM[82] <= 32'b01000000000111100100000000000000; // IADD D1 NPOS1 D2 MPOS4 D3 KPOS2
         MEM[83] <= 32'b01000000000111101000000000000000; // IADD D1 NPOS1 D2 MPOS4 D3 KPOS3
         MEM[84] <= 32'b01000000000111101100000000000000; // IADD D1 NPOS1 D2 MPOS2 D3 KPOS4
         // NPOS2
         MEM[86] <= 32'b010000/00/01/01/01/10/01/00000000000000; // IADD D1 NPOS2 D2 MPOS2 D3 KPOS2
         MEM[87] <= 32'b010000/00/01/01/01/10/10/00000000000000; // IADD D1 NPOS2 D2 MPOS2 D3 KPOS3
         MEM[88] <= 32'b010000/00/01/01/01/10/11/00000000000000; // IADD D1 NPOS2 D2 MPOS2 D3 KPOS4
         MEM[89] <= 32'b010000/00/01/01/10/10/01/00000000000000; // IADD D1 NPOS2 D2 MPOS3 D3 KPOS2
         MEM[90] <= 32'b010000/00/01/01/10/10/10/00000000000000; // IADD D1 NPOS2 D2 MPOS3 D3 KPOS3
         MEM[91] <= 32'b010000/00/01/01/10/10/11/00000000000000; // IADD D1 NPOS2 D2 MPOS3 D3 KPOS4
         MEM[92] <= 32'b010000/00/01/01/11/10/01/00000000000000; // IADD D1 NPOS2 D2 MPOS4 D3 KPOS2
         MEM[93] <= 32'b010000/00/01/01/11/10/10/00000000000000; // IADD D1 NPOS2 D2 MPOS4 D3 KPOS3
         MEM[94] <= 32'b010000/00/01/01/11/10/11/00000000000000; // IADD D1 NPOS2 D2 MPOS4 D3 KPOS4
         // NPOS3
         MEM[85] <= 32'b010000/00/01/01/11/10/01/00000000000000; // IADD D1 NPOS3 D2 MPOS2 D3 KPOS2
         MEM[85] <= 32'b010000/00/01/01/11/10/01/00000000000000; // IADD D1 NPOS3 D2 MPOS2 D3 KPOS3
         MEM[85] <= 32'b010000/00/01/01/11/10/01/00000000000000; // IADD D1 NPOS3 D2 MPOS2 D3 KPOS4
         MEM[85] <= 32'b010000/00/01/01/11/10/01/00000000000000; // IADD D1 NPOS3 D2 MPOS3 D3 KPOS2
         MEM[85] <= 32'b010000/00/01/01/11/10/01/00000000000000; // IADD D1 NPOS3 D2 MPOS3 D3 KPOS3
         MEM[85] <= 32'b010000/00/01/01/11/10/01/00000000000000; // IADD D1 NPOS3 D2 MPOS3 D3 KPOS4
         MEM[85] <= 32'b010000/00/01/01/11/10/01/00000000000000; // IADD D1 NPOS3 D2 MPOS4 D3 KPOS2
         MEM[85] <= 32'b010000/00/01/01/11/10/01/00000000000000; // IADD D1 NPOS3 D2 MPOS4 D3 KPOS3
         MEM[85] <= 32'b010000/00/01/01/11/10/01/00000000000000; // IADD D1 NPOS3 D2 MPOS4 D3 KPOS4
         INSTRUCTION <= MEM[PC];
         end
         
         
endmodule
