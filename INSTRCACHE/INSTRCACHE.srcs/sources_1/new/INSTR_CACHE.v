`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2018/12/01 14:41:58
// Design Name: 
// Module Name: INSTR_CACHE
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module INSTR_CACHE(Bottom, Address, Read_inst);
   input [3:0]Bottom;
   input wire[31:0]Address;
   output reg[31:0]Read_inst;
   
   reg [31:0]Mem[511:0];
   //integer i;
   
   /*initial begin
      $readmemb("C:/instmemory.txt",Mem);
   end*/
   //initial begin
	always@(Bottom or Address or Read_inst)begin
		if(Bottom ==4'b1000 | Bottom==4'b0100 | Bottom == 4'b0010 | Bottom == 4'b0001)begin
		Read_inst <= 32'b00000000000000000000000000000000;
			Mem[0]<=32'b00000000000000000000000000000000;
			Mem[1]<=32'b00001000000000010000000000000000;
			Mem[2]<=32'b00001000000000100000000000000001;
			Mem[3]<=32'b00001000000001010000000000000100;
			Mem[4]<=32'b00001000000001100000000000000101;
			Mem[5]<=32'b10001000000001110000000000000110;
			Mem[6]<=32'b10001000000010000000000000000111;
			Mem[7]<=32'b00001000000000110000000000000010;
			Mem[8]<=32'b00001000000001000000000000000011;
			Mem[9]<=32'b00000001000001010001110000000000;
			Mem[10]<=32'b00000001000001100010110100000000;
			Mem[11]<=32'b10000001000001110001111000000000;
			Mem[12]<=32'b10000001000010000010111100000000;
			Mem[13]<=32'b00000001000001010011000100000000;
			Mem[14]<=32'b00000001000001100100001000000000;
			Mem[15]<=32'b00000100000011011100001100000000;
			Mem[16]<=32'b10000001000001110011010000000000;
			Mem[17]<=32'b10000001000010000100010100000000;
			Mem[18]<=32'b10000100000011111110011000000000;
			Mem[19]<=32'b00000010000011001101011100000000;
			Mem[20]<=32'b00000010000000011101100000000000;
			Mem[21]<=32'b00000111000110010011000000000001;
			Mem[22]<=32'b10000010000011101111001100000000;
			Mem[23]<=32'b10000010000001001111011000000000;
			Mem[24]<=32'b10000111100110100110000000000001;
			Mem[25]<=32'b00000011001001111000101100000000;
			Mem[26]<=32'b00000011001110000111101100000000;
			Mem[27]<=32'b00000010000000011100011100000000;
			Mem[28]<=32'b00000010000000101101100000000000;
			Mem[29]<=32'b10000011101000110110100100000000;
			Mem[30]<=32'b10000011101101100011100100000000;
			Mem[31]<=32'b10000010000001001110001100000000;
			Mem[32]<=32'b10000010000001011111011000000000;
			Mem[33]<=32'b00000011010000000111100100000000;
			Mem[34]<=32'b00000011010000001000100100000000;
			Mem[35]<=32'b00000010000011001100110000000000;
			Mem[36]<=32'b00000010000011011101110100000000;
			Mem[37]<=32'b00000010000000010001000100000000;
			Mem[38]<=32'b00000010000000100010001000000000;
			Mem[39]<=32'b10000011110000000011100100000000;
			Mem[40]<=32'b10000011110000000110100100000000;
			Mem[41]<=32'b00001111000011011100011100000000;
			Mem[42]<=32'b10000010000011101110111000000000;
			Mem[43]<=32'b10000010000011111111111100000000;
			Mem[44]<=32'b10000010000001000100010000000000;
			Mem[45]<=32'b10000010000001010101010100000000;
			Mem[46]<=32'b00001111000000100001100000000000;
			Mem[47]<=32'b00000111000010100000000000000000;
			Mem[48]<=32'b10000111000010110000000000000000;
			Mem[49]<=32'b10001111000011111110001100000000;
			Mem[50]<=32'b10001111000001010100011000000000;
			Mem[51]<=32'b00000011010110000111100100000000;
			Mem[52]<=32'b00010111011010100000000000000000;
			Mem[53]<=32'b10000111111010110000000000000000;
			Mem[54]<=32'b00100111011010100000111111111111;
			Mem[55]<=32'b10100111111010110000111111111111;
			Mem[56]<=32'b10000011110101100011100100000000;
			Mem[57]<=32'b00110111011010100000000000000001;
			Mem[58]<=32'b10110111111010110000000000000001;
			Mem[59]<=32'b01000111011010100000000000000001;
			Mem[60]<=32'b11000111111010110000000000000001;
			Mem[61]<=32'b01010111011010100000111111111111;
			Mem[62]<=32'b11010111111010110000111111111111;
			Mem[63]<=32'b00001000000000010000000000000100;
			Mem[64]<=32'b00001000000000100000000000000101;
			Mem[65]<=32'b00001000000001010000000000000000;
			Mem[66]<=32'b00001000000001100000000000000001;
			Mem[67]<=32'b00000010000010111010100100000000;
			Mem[68]<=32'b10001000000001110000000000000010;
			Mem[69]<=32'b10001000000010000000000000000011;
			Mem[70]<=32'b00001000000000110000000000000110;
			Mem[71]<=32'b00001000000001000000000000000111;
			Mem[72]<=32'b00001001000010010000000000001000;
			Mem[73]<=32'b00000001000001010001110000000000;
			Mem[74]<=32'b00000001000001100010110100000000;
			Mem[75]<=32'b10000001000001110001111000000000;
			Mem[76]<=32'b10000001000010000010111100000000;
			Mem[77]<=32'b00000001000001010011000100000000;
			Mem[78]<=32'b00000001000001100100001000000000;
			Mem[79]<=32'b00000100000011011100001100000000;
			Mem[80]<=32'b10000001000001110011010000000000;
			Mem[81]<=32'b10000001000010000100010100000000;
			Mem[82]<=32'b10000100000011111110011000000000;
			Mem[83]<=32'b00000010000011001101011100000000;
			Mem[84]<=32'b00000010000000011101100000000000;
			Mem[85]<=32'b00000111000110010011000000000001;
			Mem[86]<=32'b10000010000011101111001100000000;
			Mem[87]<=32'b10000010000001001111011000000000;
			Mem[88]<=32'b10000111100110100110000000000001;
			Mem[89]<=32'b00000011001001111000101100000000;
			Mem[90]<=32'b00000011001110000111101100000000;
			Mem[91]<=32'b00000010000000011100011100000000;
			Mem[92]<=32'b00000010000000101101100000000000;
			Mem[93]<=32'b10000011101000110110100100000000;
			Mem[94]<=32'b10000011101101100011100100000000;
			Mem[95]<=32'b10000010000001001110001100000000;
			Mem[96]<=32'b10000010000001011111011000000000;
			Mem[97]<=32'b00000011010000000111100100000000;
			Mem[98]<=32'b00000011010000001000100100000000;
			Mem[99]<=32'b00000010000011001100110000000000;
			Mem[100]<=32'b00000010000011011101110100000000;
			Mem[101]<=32'b00000010000000010001000100000000;
			Mem[102]<=32'b00000010000000100010001000000000;
			Mem[103]<=32'b10000011110000000011100100000000;
			Mem[104]<=32'b10000011110000000110100100000000;
			Mem[105]<=32'b00001111000011011100011100000000;
			Mem[106]<=32'b10000010000011101110111000000000;
			Mem[107]<=32'b10000010000011111111111100000000;
			Mem[108]<=32'b10000010000001000100010000000000;
			Mem[109]<=32'b10000010000001010101010100000000;
			Mem[110]<=32'b00001111000000100001100000000000;
			Mem[111]<=32'b00000111000010100000000000000000;
			Mem[112]<=32'b10000111000010110000000000000000;
			Mem[113]<=32'b10001111000011111110001100000000;
			Mem[114]<=32'b10001111000001010100011000000000;
			Mem[115]<=32'b00000011010110000111100100000000;
			Mem[116]<=32'b00010111011010100000000000000000;
			Mem[117]<=32'b10000111111010110000000000000000;
			Mem[118]<=32'b00100111011010100000111111111111;
			Mem[119]<=32'b10100111111010110000111111111111;
			Mem[120]<=32'b10000011110101100011100100000000;
			Mem[121]<=32'b00110111011010100000000000000001;
			Mem[122]<=32'b10110111111010110000000000000001;
			Mem[123]<=32'b01000111011010100000000000000001;
			Mem[124]<=32'b11000111111010110000000000000001;
			Mem[125]<=32'b01010111011010100000111111111111;
			Mem[126]<=32'b11010111111010110000111111111111;
			Mem[127]<=32'b00001000000011000000000000001000;
			Mem[128]<=32'b00000111000000100000000000000001;
			Mem[129]<=32'b00001111000000000000000100000000;
			Mem[130]<=32'b00001111000000000000000100000000;
			Mem[131]<=32'b00000010000010111010100100000000;
			Mem[132]<=32'b00001111000000000000000100000000;
			Mem[133]<=32'b00000011000000101100101000000000;
			Mem[134]<=32'b00001111000000000000000100000000;
			Mem[135]<=32'b00001111000000000000000100000000;
			Mem[136]<=32'b00001111000000000000000100000000;
			Mem[137]<=32'b00000011000000101001101100000000;
			Mem[138]<=32'b00001111000000000000000100000000;
			Mem[139]<=32'b00001111000000000000000100000000;
			Mem[140]<=32'b00001111000000000000000100000000;
			Mem[141]<=32'b00001111000000000000000100000000;
			Mem[142]<=32'b00000110000010111010110100000000;
			Mem[143]<=32'b00001111000000000000000100000000;
			Mem[144]<=32'b00001111000000000000000100000000;
			Mem[145]<=32'b00001111000000000000000100000000;
			Mem[146]<=32'b00001111000000000000000100000000;
			Mem[147]<=32'b00001001000011010000000000001001;
			Mem[148]<=32'b00000000000000000000000000000000;
			Mem[149]<=32'b00000000000000000000000000000000;
			Mem[150]<=32'b00000000000000000000000000000000;
			Mem[151]<=32'b00000000000000000000000000000000;
			Mem[152]<=32'b00000000000000000000000000000000;
			Mem[153]<=32'b00000000000000000000000000000000;
			Mem[154]<=32'b00000000000000000000000000000000;
			Mem[155]<=32'b00000000000000000000000000000000;
			Mem[156]<=32'b00000000000000000000000000000000;

		//Reset<=0;
		end else begin
			Read_inst <= Mem[Address];
		end
	end
	//end
   /*always@(Address or Read_inst)begin //assign
      Read_inst <= Mem[Address];
   end*/
endmodule

